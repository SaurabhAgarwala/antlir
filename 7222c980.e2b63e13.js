(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{160:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return p})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var r=n(2),o=n(10),a=(n(0),n(182)),i={id:"vm",title:"Vm",generated:"@generated"},p={id:"api/vm",isDocsHomePage:!1,title:"Vm",description:"Similar to the image.{cpp,python}_unittest macros, the intent of",source:"@site/docs/api/gen-vm.md",permalink:"/antlir/docs/api/vm",editUrl:"https://github.com/facebookincubator/antlir/edit/master/website/docs/api/gen-vm.md"},c=[{value:"<code>cpp_unittest</code>",id:"cpp_unittest",children:[]},{value:"<code>python_unittest</code>",id:"python_unittest",children:[]},{value:"<code>opts</code>",id:"opts",children:[]},{value:"<code>run</code>",id:"run",children:[]}],l={rightToc:c};function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Similar to the image.{cpp,python}_unittest macros, the intent of\nvm.{cpp,python}_unittest is to be able to run unittests inside\na specific antlir layer. The main difference is that the macros in this\nfile will run the tests inside a fully booted VM instead of inside a\nsystemd-nspawn container."),Object(a.b)("p",null,"The interface of vm.{cpp,python}_unittest has been designed to be\nsimilar to that of image.{cpp,python}_unittest; therefore, one should\nfirst look over the interface specified by those macros to become familiar\nwith the options allowed there.  The key differences with\n",Object(a.b)("inlineCode",{parentName:"p"},"vm.{cpp,python}_unittest")," are:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"A ",Object(a.b)("inlineCode",{parentName:"p"},"kernel")," attribute can optionally be provided to explicitly choose a\nnon-default kernel version to run the VM.  The ",Object(a.b)("inlineCode",{parentName:"p"},"kernel")," attribute is\na struct containing various attributes and target locations for artifacts.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"A ",Object(a.b)("inlineCode",{parentName:"p"},"layer")," attribute can optionally be provided to explicitly choose a\nnon-default ",Object(a.b)("inlineCode",{parentName:"p"},"image.layer")," to boot the VM with and run the test.  Providing\na non-default ",Object(a.b)("inlineCode",{parentName:"p"},"image.layer")," will incur additional build cost due to the need\nto consturct a btrfs seed device.  As such, if you can avoid a custom\n",Object(a.b)("inlineCode",{parentName:"p"},"image.layer"),", it would be ideal.\nNote: this ",Object(a.b)("inlineCode",{parentName:"p"},"image.layer")," ",Object(a.b)("em",{parentName:"p"},"must")," be capable of successfully booting the\nVM for the tests to run.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"A user can provide a ",Object(a.b)("inlineCode",{parentName:"p"},"vm_opts")," shape which controls how the VM is\nconfigured at runtime.  The ",Object(a.b)("inlineCode",{parentName:"p"},"vm_opts")," shape is created with the ",Object(a.b)("inlineCode",{parentName:"p"},"vm.opts"),"\nfunction and has the following form:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),'vm_opts = vm.opts(\n    # This boolean option will control the install of both the kernel headers\n    # and sources for the kernel version the unittest is configured to use.\n    devel = False,\n\n    # The number of Virtual CPUs to provide the VM.\n    cpus = 1,\n\n    # The amount of memory, in mb, to provide to the VM.\n    mem_mb = 4096,\n\n    # The rootfs image to use for the vm, specified as a buck target\n    rootfs_image = "//buck/target/path:image",\n)\n'))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Currently, ",Object(a.b)("inlineCode",{parentName:"p"},"run_as_user")," and ",Object(a.b)("inlineCode",{parentName:"p"},"hostname")," are not supported by VM tests.\nThere are plans to add support for these options (see T62319183).")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"The ",Object(a.b)("inlineCode",{parentName:"p"},"boot")," option does not affect ",Object(a.b)("inlineCode",{parentName:"p"},"vm.{cpp,python}_unittest")," as there is\nno way to run VM tests in non-booted mode."))),Object(a.b)("h1",{id:"api"},"API"),Object(a.b)("h2",{id:"cpp_unittest"},Object(a.b)("inlineCode",{parentName:"h2"},"cpp_unittest")),Object(a.b)("p",null,"Prototype: ",Object(a.b)("inlineCode",{parentName:"p"},"cpp_unittest(name, vm_opts, deps, **kwargs)")),Object(a.b)("p",null,"No docstring available."),Object(a.b)("h2",{id:"python_unittest"},Object(a.b)("inlineCode",{parentName:"h2"},"python_unittest")),Object(a.b)("p",null,"Prototype: ",Object(a.b)("inlineCode",{parentName:"p"},"python_unittest(name, kernel, vm_opts, **kwargs)")),Object(a.b)("p",null,"No docstring available."),Object(a.b)("h2",{id:"opts"},Object(a.b)("inlineCode",{parentName:"h2"},"opts")),Object(a.b)("p",null,"Prototype: ",Object(a.b)("inlineCode",{parentName:"p"},"opts(bios, cpus, emulator, kernel, layer, rootfs_image, **kwargs)")),Object(a.b)("p",null,"No docstring available."),Object(a.b)("h2",{id:"run"},Object(a.b)("inlineCode",{parentName:"h2"},"run")),Object(a.b)("p",null,"Prototype: ",Object(a.b)("inlineCode",{parentName:"p"},"run(name, vm_opts, args, exe_target)")),Object(a.b)("p",null,"No docstring available."))}s.isMDXComponent=!0},182:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),s=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},b=function(e){var t=s(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=s(n),d=r,m=b["".concat(i,".").concat(d)]||b[d]||u[d]||a;return n?o.a.createElement(m,p(p({ref:t},l),{},{components:n})):o.a.createElement(m,p({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var l=2;l<a;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);