(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{145:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(2),i=n(10),o=(n(0),n(174)),r={id:"vision-containers-as-build-artifacts",title:"Vision: Containers as Build Artifacts"},s={id:"appendix/vision-containers-as-build-artifacts",isDocsHomePage:!1,title:"Vision: Containers as Build Artifacts",description:"NB: This was written in H1 2019, but the system has kept evolving.",source:"@site/docs/appendix/vision-containers-as-build-artifacts.md",permalink:"/antlir/docs/appendix/vision-containers-as-build-artifacts",editUrl:"https://github.com/facebookincubator/antlir/edit/master/website/docs/appendix/vision-containers-as-build-artifacts.md",sidebar:"docs",previous:{title:"compiler/",permalink:"/antlir/docs/contributing/todos/compiler"}},c=[{value:"tl;dr",id:"tldr",children:[]},{value:"Vision",id:"vision",children:[]},{value:"What works as of H1 2019",id:"what-works-as-of-h1-2019",children:[{value:"Try it for yourself",id:"try-it-for-yourself",children:[]},{value:"Documentation",id:"documentation",children:[]},{value:"Naming conventions",id:"naming-conventions",children:[]},{value:"Examples",id:"examples",children:[]},{value:"Core infrastructure",id:"core-infrastructure",children:[]},{value:"<code>TARGETS</code> rule types",id:"targets-rule-types",children:[]},{value:"Inheritance and composition",id:"inheritance-and-composition",children:[]}]},{value:"What remains to be done",id:"what-remains-to-be-done",children:[{value:"Task list",id:"task-list",children:[]},{value:"Buck is not just for custom images",id:"buck-is-not-just-for-custom-images",children:[]}]}],l={rightToc:c};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"nb-this-was-written-in-h1-2019-but-the-system-has-kept-evolving"},"NB: This was written in H1 2019, but the system has kept evolving."),Object(o.b)("p",null,"The high-level overview is still good, and the conceptual structure still\nstands. However, you might see some variation in syntax or naming. If you spot\nthese, please fix this wiki, or ping @lesha."),Object(o.b)("h2",{id:"tldr"},"tl;dr"),Object(o.b)("p",null,"Today, you can ",Object(o.b)("inlineCode",{parentName:"p"},"buck build")," and ",Object(o.b)("inlineCode",{parentName:"p"},"buck test")," custom filesystems for Tupperware\ncontainers (\u201cWhat works\u201d below). Buck improves the workflow for a few teams, but\nwe want to bring the same \u201ctest early, test often, deploy safely\u201d methodology to\nevery Tupperware service. We are hiring \u2014 see e.g. hackamonths\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://our.intern.facebook.com/intern/tasks/?t=46795296"}),"T46795296"),",\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://our.intern.facebook.com/intern/tasks/?t=46832242"}),"T46832242"),",\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://our.intern.facebook.com/intern/tasks/?t=46837515"}),"T46837515"),"\n(",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://fburl.com/tasks/300prf3l"}),'"buck-service-containers" task tag'),")."),Object(o.b)("h2",{id:"vision"},"Vision"),Object(o.b)("p",null,"FBCode provides smooth development, testing, and continuous integration for\nprogram binaries. Engineers can be productive with just their editor,\n",Object(o.b)("inlineCode",{parentName:"p"},"buck build"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"buck test"),". Diff reviewers see clear signal when code changes\nbreak tests."),Object(o.b)("p",null,"In contrast, defining and testing a service container is currently a complex\nprocess, involving several additional tools (at a minimum, ",Object(o.b)("inlineCode",{parentName:"p"},"configerator")," with\n",Object(o.b)("inlineCode",{parentName:"p"},"fbpkg")," followed by ",Object(o.b)("inlineCode",{parentName:"p"},".tw")," edits and ",Object(o.b)("inlineCode",{parentName:"p"},"tw sandbox"),'). Shipping the service requires\nConveyor, Service Foundry, and some "test in production" elbow grease. Compared\nto pure binaries, the iteration time is slower, the debugging experience more\nesoteric, and the risk to production is often non-zero.'),Object(o.b)("p",null,"Our goal is to make developing service containers be just as easy and safe as\nbuilding binaries is today. Here are our core values:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"A deployable container feels like a regular build artifact: it is\ndeterministically reproducible from an ",Object(o.b)("inlineCode",{parentName:"li"},"hg")," hash, its bugs are bisectable,\nits changelogs are human-readable. You can inspect the built container right\nin your FBCode repo."),Object(o.b)("li",{parentName:"ul"},'"What you test is what you run" \u2014 the container you inspect and test in your\nFBCode repo can be deployed to production, unmodified.'),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"buck build")," & ",Object(o.b)("inlineCode",{parentName:"li"},"buck test")," work as you expect."),Object(o.b)("li",{parentName:"ul"},"Packaging containers for deployment is ",Object(o.b)("em",{parentName:"li"},"managed"),", not ad-hoc \u2014 service\nowners are shielded from the details of how their build artifact gets to\nproduction. In return, they get transparent improvements to deployment\nefficiency (ask @mpawlowski, we have a long pipeline of perf boosts in the\nworks)."),Object(o.b)("li",{parentName:"ul"},"The filesystem construction language is (i) declarative \u2014 the compiler\nchecks filesystem actions for compatibility, and sorts them automatically,\nand (ii) strict \u2014 to the extent possible, we enforce that actions succeed\nfully (i.e. no implicit overwriting, no accepting pre-existing stuff at the\nsame location), and we do not add features that do not compose predictably\nwith others."),Object(o.b)("li",{parentName:"ul"},"Follow the Unix philosophy. Our tools must integrate well with today's\ninfra, but these integrations must not complicate our core concerns, or it\nwill be hard to build the infra of tomorrow. To stay lean, we take the time\nto add each integration through the composition of separable, single-purpose\ntools. As a bonus, this keeps our\n",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/facebookincubator/antlir"}),"nascent open-source release"),"\nwithin reach.")),Object(o.b)("p",null,"Here is an ",Object(o.b)("strong",{parentName:"p"},"aspirational")," ",Object(o.b)("inlineCode",{parentName:"p"},"TARGETS")," file defining a service, from binary\nthrough testing & packaging:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'cpp_library(\n  name = "banana_server_lib",\n  srcs = ["BananaServer.cpp"],\n)\n\ncpp_binary(\n  name = "banana-server",\n  srcs = ["banana_main.cpp"],\n  deps = [":banana_server_lib"],\n)\n\ntw.service(\n  name = "banana",\n  binary = ":banana-server",\n  args = ["--ice=cream", "-vvv", "smoothie"],\n)\n\n# Implicitly depends on :banana\ntw.packager(name = "tupperware.service.banana")\n\ntw.python_service_test(\n  name = "banana-service-test",\n  service = ":banana",\n  srcs = ["test_banana_service.py"],\n  needed_coverage = [(100, ":banana_server_lib")],\n)\n')),Object(o.b)("p",null,"With the above ",Object(o.b)("inlineCode",{parentName:"p"},"fbcode/banana/TARGETS"),", a typical workflow would involve\niterating on tests before putting up a diff. This works as you expect:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"buck test //banana:banana-service-test\n")),Object(o.b)("p",null,"Your test runs inside an ephemeral container. The test code itself looks looks\nexactly like a regular ",Object(o.b)("inlineCode",{parentName:"p"},"python_unittest"),". Tests in other languages will be\nsupported as well."),Object(o.b)("p",null,"To make a deployable artifact, you would:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"buck run //banana:tupperware.service.banana\n")),Object(o.b)("p",null,"This will print a deployable handle, which you (or Conveyor + SF) can include in\nyour ",Object(o.b)("inlineCode",{parentName:"p"},".tw")," spec. If you are familiar with the traditional ",Object(o.b)("inlineCode",{parentName:"p"},".tw")," syntax, using\nthe deployable handle will replace a bunch of fields in that ",Object(o.b)("inlineCode",{parentName:"p"},".tw")," spec (e.g.\n",Object(o.b)("inlineCode",{parentName:"p"},"packages"),", ",Object(o.b)("inlineCode",{parentName:"p"},"command"),", ",Object(o.b)("inlineCode",{parentName:"p"},"arguments"),", ",Object(o.b)("inlineCode",{parentName:"p"},"pre_run_steps"),"). What remains in the ",Object(o.b)("inlineCode",{parentName:"p"},".tw"),"\nfile focuses on scheduling & allocation, while the ",Object(o.b)("inlineCode",{parentName:"p"},"TARGETS")," file now specifies\nhow to start & stop a single service task."),Object(o.b)("p",null,"In other words, this deployable artifact knows how to reconstruct your\nfilesystem, and how to start your service inside it."),Object(o.b)("p",null,"Normally, you would not manually package your service. Instead, you would add a\nline of this sort to your\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://our.intern.facebook.com/intern/wiki/Fbcode_Continuous_Build/"}),"contbuild config"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'"fbpkg_builders": ["//banana:tupperware.meta.banana.service"],\n')),Object(o.b)("p",null,"This will ensure that clean, unit-tested packages of your service are published\nperiodically. As with regular binaries, you can then feed these packages into\nConveyor/SF for automated deployment."),Object(o.b)("h2",{id:"what-works-as-of-h1-2019"},"What works as of H1 2019"),Object(o.b)("p",null,"The toolchain has production-ready support for publishing ",Object(o.b)("strong",{parentName:"p"},"custom btrfs\nimages"),". A handful of high-profile teams, including Traffic Infrastructure, Web\nFoundation, and Python Foundation have migrated their images from the legacy\nsystem, and reported no negative experiences."),Object(o.b)("h3",{id:"try-it-for-yourself"},"Try it for yourself"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"$ cd ~/fbcode\n\n# Enter a built container.\n# (implicitly builds //tupperware/image/python_foundation:banderwrapper)\n$ buck run //tupperware/image/python_foundation:banderwrapper-container\n...\nbash-4.4$ ls\nbin   data  etc   lib    logs   meta  opt       proc  run   srv  tmp  var\nboot  dev   home  lib64  media  mnt   packages  root  sbin  sys  usr\nbash-4.4$ exit\n\n# Execute some tests inside the container.\n$ buck test //tupperware/image/python_foundation:banderwrapper-test\n...\nSummary (total time 2.23s):\n  PASS: 3\n  ...\n")),Object(o.b)("p",null,"And this\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/contbuild/configs/tupperware_image_python_foundation;d691e6cbafb2811750d2c161dbbd525af3956d91$8"}),"line in the contbuild config"),"\ncauses the custom image to be\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://our.intern.facebook.com/intern/sandcastle/projecthealth/?search_keywords%5B0%5D=tupperware_image_python_foundation&search_keywords%5B1%5D=testinfra_endtoend_automation&types%5B0%5D=master"}),"packaged continuously"),",\nas long as tests pass. Notably, the customer did not need to interact with\nConfigerator or fbpkg to achieve this \u2014 all their code is in\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/tupperware/image/python_foundation/"}),"tupperware/image/python_foundation"),"."),Object(o.b)("h3",{id:"documentation"},"Documentation"),Object(o.b)("p",null,"For each implemented feature, the code contains detailed comments explaining how\nto use it. For example, almost 50% of the implementation of\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/antlir/buck/image_layer.bzl"}),"image.layer"),"\nis documentation. Links to relevant docs are sprinkled throughout the rest of\nthis note. It is on our roadmap to consolidate key user-facing docs on the wiki.\nFor now, start here and read the comments for the details."),Object(o.b)("h3",{id:"naming-conventions"},"Naming conventions"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Image definitions:")," By convention, all Tupperware custom images produced\nusing this toolchain live in\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/tupperware/image"}),"fbcode/tupperware/image/"),"\n",Object(o.b)("inlineCode",{parentName:"p"},"<oncall_name>")," (optionally, with subdirectories per project)."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Contbuild configs:")," Images are built and\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/antlir/buck/image_python_unittest.bzl"}),"tested"),"\nby\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://our.intern.facebook.com/intern/wiki/Fbcode_Continuous_Build"}),"Contbuild"),".\nThe corresponding contbuild configs are named\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/contbuild/configs/"}),"fbcode/contbuild/configs/"),"\n",Object(o.b)("inlineCode",{parentName:"p"},"tupperware_image_<oncall_name>"),"."),Object(o.b)("h3",{id:"examples"},"Examples"),Object(o.b)("p",null,"These teams are highlighted because their images run in real clusters, and\nbecause their use-cases demonstrate different features of the system."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Web & Intern Foundation custom images:")," The file\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/tupperware/image/webfoundation/TARGETS"}),"tupperware/image/webfoundation/TARGETS"),"\ndefines a ",Object(o.b)("inlineCode",{parentName:"p"},"facebook.com")," image. Then, the image\n",Object(o.b)("inlineCode",{parentName:"p"},"//tupperware/image/intern:intern_foundation.intern"),"\n",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/tupperware/image/intern/TARGETS;2ea3c6f8eba19345d90b5e30efb5e8624ac01a7d$22"}),"inherits")),"\nthe content of ",Object(o.b)("inlineCode",{parentName:"p"},"facebook.com"),", and adds a few more items. You may notice that\n",Object(o.b)("inlineCode",{parentName:"p"},"facebook.com")," defines two different package variations \u2014\n",Object(o.b)("inlineCode",{parentName:"p"},"tupperware.image.facebook.com")," and ",Object(o.b)("inlineCode",{parentName:"p"},"tupperware.sendstream.facebook.com"),", which\nimplicitly depend on the ",Object(o.b)("inlineCode",{parentName:"p"},"image.layer"),". There are two because Web Foundation is\ntrying our a newer, more efficient deployment mechanism. However, normal custom\nimage users should only define ",Object(o.b)("inlineCode",{parentName:"p"},"tupperware.image.LAYER_NAME"),", and wait for the\nTupperware team to transparently migrate everyone to the new technology when\nready."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Python Foundation custom image:")," Inside\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/tupperware/image/python_foundation/TARGETS"}),"tupperware/image/python_foundation/TARGETS"),",\nyou will find a ",Object(o.b)("inlineCode",{parentName:"p"},"image.python_unittest")," target. This accepts all usual\n",Object(o.b)("inlineCode",{parentName:"p"},"python_unittest")," arguments \u2014 and it's not just for Python services, refer to\nthe \"",Object(o.b)("inlineCode",{parentName:"p"},"TARGETS"),' rule types" section below.'),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"TI Proxygen custom image:")," The image in\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/tupperware/image/ti_proxygen/TARGETS"}),"tupperware/image/ti_proxygen/TARGETS"),"\nshows a neat pattern that was impossible before Buck images. On the legacy image\nbuild system, the Proxygen image would copy a rarely rebuilt,\npush4push-unfriendly ",Object(o.b)("inlineCode",{parentName:"p"},"fb-drip")," fbpkg into the image. In the current image, a\nfresh, built-from-trunk ",Object(o.b)("inlineCode",{parentName:"p"},"drip")," is copied directly into the image. Since Proxygen\nhas automated canary and deployment, their pre-push tests automatically validate\nthat the new binary works with the new service ... and now this un-owned binary\nis always up-to-date. ",Object(o.b)("strong",{parentName:"p"},"Important:")," Consult with @lesha or @lsalis before doing\nthis for your service \u2014 today's ",Object(o.b)("inlineCode",{parentName:"p"},"fbpkg_builder")," has some rough edges that may\nmean you want to wait until H2 2019."),Object(o.b)("h3",{id:"core-infrastructure"},"Core infrastructure"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We built a toolbox for determinstically constructing\n",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://btrfs.wiki.kernel.org/index.php/Main_Page"}),"btrfs")," filesystem\nimages, and for analyzing btrfs send-streams. Btrfs snapshots enable us to\nefficiently layer multiple build steps."),Object(o.b)("li",{parentName:"ul"},"The btrfs toolbox is well-integrated with Buck, which is non-trivial since\nBuck itself can only manage rule outputs that are plain old files \u2014 not\ncomplete filesystems with rich Linux metadata. Unused btrfs subvolumes are\ngarbage-collected so your devbox does not run out of space."),Object(o.b)("li",{parentName:"ul"},"All our code is testable by design, with enforced 100% test coverage. We\ninvested in making it easy to write expressive tests \u2014 this\n",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/antlir/compiler/tests/test_items.py;65cc006228fb8d852d70b5cc53132319b5bd71d4$259-270"}),"handful of lines asserts"),"\nthe complete state of the filesystem, down to SELinux attributes, xattrs,\nand even btrfs cloned blocks."),Object(o.b)("li",{parentName:"ul"},"We periodically store immutable snapshots of all prod RPM repos to make RPM\ninstallation fully deterministic. Container images frequently install RPMs\nto deliver dependencies. Our RPM repos are extremely dynamic, making the\nbehavior of ",Object(o.b)("inlineCode",{parentName:"li"},"yum")," vary from moment-to-moment and even host-to-host. Despite\nthis, Buck build artifacts ",Object(o.b)("strong",{parentName:"li"},"must")," be fully reproducible for many reasons,\nincluding security, bisects, and artifact caching. Efficient repo snapshots\nallow us to deterministically provide up-to-date software."),Object(o.b)("li",{parentName:"ul"},"The tools for building filesystem come with an integrated Linux container\nruntime, which powers ",Object(o.b)("inlineCode",{parentName:"li"},"buck run")," and ",Object(o.b)("inlineCode",{parentName:"li"},"buck test"),". A container is more than a\ndisk image \u2014 booting a Tupperware job involves setting up mounts, cgroups,\nnamespaces, and a host of other non-persistent state in the kernel and\nuserland. The Buck runtime is currently a lightweight approximation of TW\nagent, but there are plans to use the production agent for build-time\ntesting."),Object(o.b)("li",{parentName:"ul"},"[partly rolled out]"," The image build environment is a reproducible, immutable\nOS that is independent of the host OS, and is optimized for quickly\ninstalling the in-fbcode RPM snapshot.")),Object(o.b)("h3",{id:"targets-rule-types"},Object(o.b)("inlineCode",{parentName:"h3"},"TARGETS")," rule types"),Object(o.b)("p",null,"While the higher-level ",Object(o.b)("inlineCode",{parentName:"p"},"tw.service")," rule is still at the concept stage, we have\nlower-level production-ready Buck rules that will power the TW-specific syntax\nsugar from the vision above. The code has detailed API documentation \u2014\ntypically, you will want to read the file doc-block, and then skip to the ",Object(o.b)("inlineCode",{parentName:"p"},"def"),"\nof the main function:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/antlir/buck/image_layer.bzl"}),"image.layer"),":\nA container filesystem that acts as a Buck artifact. Layers support\ninheritance, and can be mounted inside other layers."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://our.intern.facebook.com/intern/diffusion/FBS/browse/master/fbcode/antlir/buck/image_actions/feature.bzl"}),"image.feature"),":\nA library-like abstraction \u2014 a set of things to be done to any layer\nthat includes this feature.\n-",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/antlir/buck/image_python_unittest.bzl"}),"image.python_unittest"),":\nA regular ",Object(o.b)("inlineCode",{parentName:"li"},"python_unittest")," that runs inside an ",Object(o.b)("inlineCode",{parentName:"li"},"image.layer"),". This lets you\nyou validate your filesystem by running code inside a container that loosely\napproximates production. You are encouraged to use the\n",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/antlir/buck/tests/test_image_python_unittest.py"}),"needs_coverage assertion"),"\nto ensure 100% of your service's library gets exercised within the\ncontainer. If your service is in C++ (or Java or Rust), you can easily\ninclude the ",Object(o.b)("inlineCode",{parentName:"li"},"{cpp,java,rust,...}_binary")," in the ",Object(o.b)("inlineCode",{parentName:"li"},"resources")," of your\n",Object(o.b)("inlineCode",{parentName:"li"},"image.python_unittest"),", and use the Python test to exercise the binary.\nSupport for ",Object(o.b)("inlineCode",{parentName:"li"},"image.<yourlanguage>_unittest")," will be added as requested."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/tupperware/image/buck/tw.bzl"}),"tw.image_fbpkg_builder"),":\nThe TW-managed solution for packaging and distributing custom btrfs images.\nCustomers write a one-line target, which knows how to publish an\n",Object(o.b)("inlineCode",{parentName:"li"},"image.layer")," from the same ",Object(o.b)("inlineCode",{parentName:"li"},"TARGETS")," file. Adding this target to the\n",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://our.intern.facebook.com/intern/wiki/Fbcode_Continuous_Build/config-file-reference/"}),'"fbpkg_builders" field of the contbuild config'),"\nwill publish contbuild-tested ephemeral fbpkgs, ready for your\n",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://our.intern.facebook.com/intern/wiki/One_World/Infrastructure/Service_Foundry/"}),"continuous deployment pipeline"),".\nThis rule is a simple combination of two primitives below \u2014 but prefer to\nuse the higher-level one, since TW has specific plans to (transparently)\noptimize the packaging and distribution of custom images.",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/antlir/buck/image_package.bzl"}),"image.package"),":\na serialization primitive for layers"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/antlir/buck/facebook/fbpkg_builder.bzl"}),"fbpkg.builder"),":\na way to define and (cont)build Fbpkgs straight fbcode, no Configerator config needed."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://our.intern.facebook.com/intern/diffusion/FBS/browse/master/fbcode/antlir/fbpkg/facebook/fbpkg.bzl"}),"fbpkg.fetched","_","layer"),":\n",Object(o.b)("em",{parentName:"li"},"(ready for use in container tests, but not for production)")," A simple way to\nmount an ",Object(o.b)("inlineCode",{parentName:"li"},"fbpkg:tag")," in your container \u2014 add a new package by running\n",Object(o.b)("inlineCode",{parentName:"li"},"buck run antlir/fbpkg/facebook/db:update-db -- --db antlir/fbpkg/facebook/db/main_db.bzl --create YOUR_PKG YOUR_TAG '{}'"),",\nand refer to the new target in your layer via in the ",Object(o.b)("inlineCode",{parentName:"li"},"mounts")," field. Let's\ncontrast this with specifying ",Object(o.b)("inlineCode",{parentName:"li"},"fbpkg:tag")," in the ",Object(o.b)("inlineCode",{parentName:"li"},"packages")," field of your TW\njob. At present, if the ",Object(o.b)("inlineCode",{parentName:"li"},"tag")," changes mid-way through your ServiceFoundry\npush, your job spec will be considered changed, and SF may re-push the\nentire job (this has caused Proxygen SEVs). In contrast, if you build a\ncontainer with an ",Object(o.b)("inlineCode",{parentName:"li"},"fbpkg.fetched_layer"),", the ",Object(o.b)("inlineCode",{parentName:"li"},"tag")," is resolved to a UUID at\nbuild time, so the job that you deploy will always be the one that you\ntested, even if the ",Object(o.b)("inlineCode",{parentName:"li"},"tag")," moves ahead. Mounting an ",Object(o.b)("inlineCode",{parentName:"li"},"fbpkg.fetched_layer")," is\nalso much better than","*"," copying","*"," the fbpkg into your custom image. If you\ncopy N fbpkgs of M bytes into your image, each image update will re-deploy N\n","*"," M bytes even if only M of them changed. In other words, by copying into\nthe image you will incur more I/O per update, your updates will be slower,\nand you will rob TW agent of the ability to share an fbpkg between multiple\ncontainers on the host.")),Object(o.b)("h3",{id:"inheritance-and-composition"},"Inheritance and composition"),Object(o.b)("p",null,"Containers often add significant complexity beyond their constituent binaries \u2014\ncommon concerns include installing dependencies, describing the correct start-up\nof processes, and orchestrating the relationships between binaries and\nprocesses. To manage this complexity, it is most appropriate to engineer the\ncontainer as any other software artifact: to be assembled in from modular units,\nwith each unit tested separately, and with additional tests for the integration."),Object(o.b)("p",null,"This section covers the supported techniques for modularizing filesystem\nconstruction. The above ",Object(o.b)("inlineCode",{parentName:"p"},"TARGETS")," rule types allow you to use the traditional\nmeans of composition:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Primitives:")," The system must provide some actions to compose. Such\nprimitives include making directories & symlinks, copying outputs of other\nbuild rules (and repo files via the ",Object(o.b)("inlineCode",{parentName:"li"},"export_file")," rule), and even extracting\ndeterministic tarballs (for fbpkg support). See ",Object(o.b)("inlineCode",{parentName:"li"},"def image_feature")," in\n",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/fbcode/antlir/buck/image_feature.bzl"}),"image","_","feature.bzl"),"\nfor an up-to-date list."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Inheritance:")," By specifying ",Object(o.b)("inlineCode",{parentName:"li"},"parent_layer")," in ",Object(o.b)("inlineCode",{parentName:"li"},"image.layer"),", the new\nlayer inherits the entire contents and runtime configuration of its parent.\nThanks to btrfs snapshots, layer inheritance is very fast. Just like in\n",Object(o.b)("inlineCode",{parentName:"li"},"docker build"),', Buck layer caching can drastically improve the speed of\niterating on the top layers. Unlike Docker, though, the layers are truly\nhermetic, and are guaranteed to be rebuilt when the inputs do change. As\nwith regular code, inheritance must be used sparingly. First, it is risky \u2014\nthe child receives all future modifications to the parent. Second, it is\noften inappropriate \u2014 how often do two artifacts truly satisfy an "is a"\nrelationship?'),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Composition of actions:")," An ",Object(o.b)("inlineCode",{parentName:"li"},"image.feature")," defines how to manipulate the\n",Object(o.b)("inlineCode",{parentName:"li"},"image.layer")," that includes it. The feature\u2019s actions are not materialized\neagerly, so this style of composition incurs additional build-time work each\ntime a layer includes a feature. Worse yet, each dependent layer will pay a\nseparate I/O cost for distributing similar sets of bits produced by those\nactions. In exchange for these expenses, features bring flexibility, since a\nfeature's behavior can adapt itself to the contents of the layer under\nconstruction. It's important to note that features (and their constituent\nactions) deliberately have no way of customizing the order of the actions,\nso any actions that can be defined by features must commute, or be subject\nto a well-defined implicit ordering."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Composition of subtrees (\u201cmounts\u201d):")," Thanks to btrfs snapshots,\n",Object(o.b)("inlineCode",{parentName:"li"},"image.layer")," inheritance is performant. However, it can be risky or\ninappropriate. Action composition is flexible, but results in duplicate work\nfor builds & artifact distribution. Composition of subtrees aims to provide\na happy medium. If your filesystem feature can be defined entirely by one\nsubtree, like ",Object(o.b)("inlineCode",{parentName:"li"},"/opt/foo_application"),", you are in luck. In this case, the\nfeature can be assembled as its own ",Object(o.b)("inlineCode",{parentName:"li"},"image.layer")," and mounted into other\nlayers via ",Object(o.b)("inlineCode",{parentName:"li"},'mounts = {"/opt/foo_application": "//path/to:foo_app_layer"}'),".\nThen, ",Object(o.b)("inlineCode",{parentName:"li"},"foo_app_layer")," will get built just once, no matter how many other\nlayers mount it. Its bits will get packaged only once for distribution. A\nhost running containers that include ",Object(o.b)("inlineCode",{parentName:"li"},"foo_app_layer")," will download just one\ncopy, and that copy will be mounted into all containers that use it. An\nimportant case of subtree composition is mounting an ",Object(o.b)("inlineCode",{parentName:"li"},"fbpkg.fetched_layer"),"\ninto your layer. This is much more efficient than copying an fbpkg into a\ncustom image.")),Object(o.b)("h2",{id:"what-remains-to-be-done"},"What remains to be done"),Object(o.b)("h3",{id:"task-list"},"Task list"),Object(o.b)("p",null,"For the time being, we're consolidating all Buck-related tasks in this document:\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://fb.quip.com/YR5sAUGA74lc"}),"Work items for service containers as build-time artifacts (aka Buck image build)"),"\n\u2014 we'll probably switch to Tasks eventually, but a flat file is better for now."),Object(o.b)("h3",{id:"buck-is-not-just-for-custom-images"},"Buck is not just for custom images"),Object(o.b)("p",null,'The "Vision" section above shows how ',Object(o.b)("inlineCode",{parentName:"p"},"TARGETS")," files will be used to describe a\nservice, but it makes no mention of a custom image \u2014 i.e. an entire filesystem\nthat is materialized and packaged opaquely at build-time."),Object(o.b)("p",null,"Let\u2019s contrast custom images to the 2018 default for Tupperware services:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"TW provides the entire filesystem,"),Object(o.b)("li",{parentName:"ul"},"an fbpkg containing just the fbcode-platform-based service binary is\nbind-mounted on top of that filesystem.")),Object(o.b)("p",null,"This 2-step default has low costs (at runtime, in maintenance, and in\ndistribution), but it does not permit arbitrary changes to the container images.\nHence, some teams find custom images to be necessary."),Object(o.b)("p",null,"A growing number of customers are using ",Object(o.b)("inlineCode",{parentName:"p"},"TARGETS"),' to build custom images. The\neventual goal is to allow TARGETS files to also be used by the typical TW\ncustomer to specify their filesystem in the "base image + bind-mount" style.'),Object(o.b)("p",null,"Migrating all filesystem details to ",Object(o.b)("inlineCode",{parentName:"p"},"TARGETS")," gives two big wins:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"All TW container filesystems become testable at diff-time."),Object(o.b)("li",{parentName:"ul"},"The distribution of the container filesystem becomes a (mostly opaque)\nimplementation detail, which frees the TW team to dramatically optimize\ncontainer filesystem delivery in practice.")),Object(o.b)("p",null,'There are a few lower-level "to-do"s necessary to support non-custom images from\n',Object(o.b)("inlineCode",{parentName:"p"},"TARGETS")," files. These are detailed in the task list."),Object(o.b)("p",null,"Beyond ",Object(o.b)("inlineCode",{parentName:"p"},"TARGETS"),"-defined filesystems, it is part of the vision to also be able\nto build via ",Object(o.b)("inlineCode",{parentName:"p"},"TARGETS")," much of the service runtime configuration.\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://fb.prod.facebook.com/groups/btrmeup/permalink/2147662275313427/"}),"This group post"),"\ncontains a rough sketch of the eventual implementation."),Object(o.b)("p",null,"An attentive reader will notice that the idea of configuring TW jobs at\nbuild-time overlaps with Hermetic Configs, and the testing feature set resembles\na watered-down Cogwheel. Luckily, we are in touch with both teams, and feel that\nwe are pushing towards a shared broader vision. Comment for a more discussion of\nhow these technologies relate."))}b.isMDXComponent=!0},174:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),b=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=b(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=b(n),d=a,m=p["".concat(r,".").concat(d)]||p[d]||u[d]||o;return n?i.a.createElement(m,s(s({ref:t},l),{},{components:n})):i.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var l=2;l<o;l++)r[l]=n[l];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);