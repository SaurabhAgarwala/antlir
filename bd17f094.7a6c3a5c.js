(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{170:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return p}));var a=n(2),i=n(10),l=(n(0),n(182)),r={id:"image",title:"Image",generated:"@generated"},o={id:"api/image",isDocsHomePage:!1,title:"Image",description:"This provides a more friendly UI to the image_* macros.",source:"@site/docs/api/gen-image.md",permalink:"/antlir/docs/api/image",editUrl:"https://github.com/facebookincubator/antlir/edit/master/website/docs/api/gen-image.md",sidebar:"docs",previous:{title:"Fetched Artifacts",permalink:"/antlir/docs/concepts/pre-built-artifacts/fetched-artifacts"},next:{title:"image.*_unittest",permalink:"/antlir/docs/runtime/nspawn-runtime/image-unittest"}},b=[{value:"<code>clone</code>",id:"clone",children:[{value:"Trailing slashes on both paths are significant",id:"trailing-slashes-on-both-paths-are-significant",children:[]},{value:"Known deviations from perfect cloning",id:"known-deviations-from-perfect-cloning",children:[]},{value:"No UID/GID remapping is attempted",id:"no-uidgid-remapping-is-attempted",children:[]},{value:"When to use this?",id:"when-to-use-this",children:[]}]},{value:"<code>cpp_unittest</code>",id:"cpp_unittest",children:[]},{value:"<code>feature</code>",id:"feature",children:[]},{value:"<code>mkdir</code>",id:"mkdir",children:[]},{value:"<code>install</code>",id:"install",children:[]},{value:"<code>install_buck_runnable</code>",id:"install_buck_runnable",children:[{value:"When to use <code>install_buck_runnable</code> vs <code>install</code>?",id:"when-to-use-install_buck_runnable-vs-install",children:[]}]},{value:"<code>tarball</code>",id:"tarball",children:[]},{value:"<code>remove</code>",id:"remove",children:[]},{value:"<code>rpms_install</code>",id:"rpms_install",children:[]},{value:"<code>rpms_remove_if_exists</code>",id:"rpms_remove_if_exists",children:[]},{value:"<code>symlink_dir</code>",id:"symlink_dir",children:[]},{value:"<code>symlink_file</code>",id:"symlink_file",children:[]},{value:"<code>host_dir_mount</code>",id:"host_dir_mount",children:[]},{value:"<code>host_file_mount</code>",id:"host_file_mount",children:[]},{value:"<code>layer_mount</code>",id:"layer_mount",children:[]},{value:"<code>layer</code>",id:"layer",children:[]},{value:"<code>layer_alias</code>",id:"layer_alias",children:[]},{value:"<code>package</code>",id:"package",children:[]},{value:"<code>packaged_layer</code>",id:"packaged_layer",children:[]},{value:"<code>python_unittest</code>",id:"python_unittest",children:[]},{value:"<code>sendstream_layer</code>",id:"sendstream_layer",children:[]},{value:"<code>source</code>",id:"source",children:[]},{value:"<code>test_rpm_names</code>",id:"test_rpm_names",children:[]}],c={rightToc:b};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"This provides a more friendly UI to the image_* macros."),Object(l.b)("h1",{id:"api"},"API"),Object(l.b)("h2",{id:"clone"},Object(l.b)("inlineCode",{parentName:"h2"},"clone")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"clone(src_layer, src_path, dest_path)")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},'image.clone("//path/to:src_layer", "src/path", "dest/path")')," copies a\nsubtree of an existing layer into the one under construction. To the extent\npossible, filesystem metadata are preserved."),Object(l.b)("h3",{id:"trailing-slashes-on-both-paths-are-significant"},"Trailing slashes on both paths are significant"),Object(l.b)("p",null,"The three supported cases are:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},'"s/rc" -> "dest/" creates "dest/rc"'),Object(l.b)("li",{parentName:"ul"},'"s/rc/" -> "dest/" creates "dest/(children of rc)"'),Object(l.b)("li",{parentName:"ul"},'"s/rc" -> "dest" creates "dest"')),Object(l.b)("p",null,"More explicitly:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A trailing slash in ",Object(l.b)("inlineCode",{parentName:"li"},"src_path"),' means "use the ',Object(l.b)("inlineCode",{parentName:"li"},"rsync"),' convention":',Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Do not clone the source directory, but only its contents."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"dest_path")," must be a pre-existing dir, and it must end in ",Object(l.b)("inlineCode",{parentName:"li"},"/")))),Object(l.b)("li",{parentName:"ul"},"Similar to ",Object(l.b)("inlineCode",{parentName:"li"},"image.symlink*"),", a trailing slash in ",Object(l.b)("inlineCode",{parentName:"li"},"dest_path")," means that\nit's a pre-existing directory (e.g.  made by ",Object(l.b)("inlineCode",{parentName:"li"},"image.mkdir"),"), and ",Object(l.b)("inlineCode",{parentName:"li"},"clone"),"\nwill only write to:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"dest/(basename of src_path)")," if ",Object(l.b)("inlineCode",{parentName:"li"},"src_path")," lacks a trailing /"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"dest/(children of src_path)")," if ",Object(l.b)("inlineCode",{parentName:"li"},"src_path")," has a trailing /")))),Object(l.b)("h3",{id:"known-deviations-from-perfect-cloning"},"Known deviations from perfect cloning"),Object(l.b)("p",null,"Most likely, SELinux attrs change. Future: add real tests for this?"),Object(l.b)("h3",{id:"no-uidgid-remapping-is-attempted"},"No UID/GID remapping is attempted"),Object(l.b)("p",null,"We assume that ",Object(l.b)("inlineCode",{parentName:"p"},":src_layer")," has the same user/group DB as the new layer."),Object(l.b)("h3",{id:"when-to-use-this"},"When to use this?"),Object(l.b)("p",null,"Often, instead of using , you should prefer ",Object(l.b)("inlineCode",{parentName:"p"},"image.layer_mount"),", which allows\nyou to compose independent pieces of the filesystem at ",Object(l.b)("em",{parentName:"p"},"runtime"),", without\nincurring the cost of publishing images with a lot of duplicated content."),Object(l.b)("p",null,"If you're trying to copy the output of a regular Buck target, instead use\n",Object(l.b)("inlineCode",{parentName:"p"},"image.install")," or ",Object(l.b)("inlineCode",{parentName:"p"},"image.install_buck_runnable"),". These rewrite filesystem\nmetadata to a deterministic state, while the state of the on-disk metadata in\n",Object(l.b)("inlineCode",{parentName:"p"},"buck-out")," is undefined."),Object(l.b)("h2",{id:"cpp_unittest"},Object(l.b)("inlineCode",{parentName:"h2"},"cpp_unittest")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"cpp_unittest(name, layer, boot, run_as_user, visibility, hostname, container_opts, **cpp_unittest_kwargs)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"feature"},Object(l.b)("inlineCode",{parentName:"h2"},"feature")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"feature(name, features, visibility, _internal_only_version_sets)")),Object(l.b)("p",null,"Turns a group of image actions into a Buck target, so it can be\nreferenced from outside the current project via ",Object(l.b)("inlineCode",{parentName:"p"},"//path/to:name"),"."),Object(l.b)("p",null,"Do NOT use this for composition within one project, just use a list."),Object(l.b)("p",null,"See the file docblock for more details on image action composition."),Object(l.b)("p",null,"See other ",Object(l.b)("inlineCode",{parentName:"p"},".bzl")," files in this directory for actions that actually build\nthe container (install RPMs, remove files/directories, create symlinks\nor directories, copy executable or data files, declare mounts)."),Object(l.b)("h2",{id:"mkdir"},Object(l.b)("inlineCode",{parentName:"h2"},"mkdir")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"mkdir(parent, dest, mode, user, group)")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},'image.mkdir("/a/b", "c/d")')," creates the directories ",Object(l.b)("inlineCode",{parentName:"p"},"c/d")," in the image\ninside the pre-existing directory ",Object(l.b)("inlineCode",{parentName:"p"},"/a/b")," --"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"parent")," is an image-absolute path, inside which the directory will be\ncreated."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"dest")," is a path relative to ",Object(l.b)("inlineCode",{parentName:"li"},"parent"),", which will be created.")),Object(l.b)("p",null,"The arguments ",Object(l.b)("inlineCode",{parentName:"p"},"parent")," and ",Object(l.b)("inlineCode",{parentName:"p"},"dest")," (",Object(l.b)("inlineCode",{parentName:"p"},"/a/b")," and ",Object(l.b)("inlineCode",{parentName:"p"},"c/d")," in the example above) are\nmandatory; ",Object(l.b)("inlineCode",{parentName:"p"},"mode"),", ",Object(l.b)("inlineCode",{parentName:"p"},"user"),", and ",Object(l.b)("inlineCode",{parentName:"p"},"group")," are optional."),Object(l.b)("p",null,"The argument ",Object(l.b)("inlineCode",{parentName:"p"},"mode")," changes file mode bits of all directories in ",Object(l.b)("inlineCode",{parentName:"p"},"dest"),". It\ncan be an integer fully specifying the bits or a symbolic string like ",Object(l.b)("inlineCode",{parentName:"p"},"u+rx"),".\nIn the latter case, the changes are applied on top of mode 0."),Object(l.b)("p",null,"The arguments ",Object(l.b)("inlineCode",{parentName:"p"},"user")," and ",Object(l.b)("inlineCode",{parentName:"p"},"group")," change file owner and group of all\ndirectories in ",Object(l.b)("inlineCode",{parentName:"p"},"dest"),". ",Object(l.b)("inlineCode",{parentName:"p"},"user")," and ",Object(l.b)("inlineCode",{parentName:"p"},"group")," can be integers or symbolic strings.\nIn the latter case, the passwd/group database from the host (not from the\nimage) is used."),Object(l.b)("h2",{id:"install"},Object(l.b)("inlineCode",{parentName:"h2"},"install")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"install(source, dest, mode, user, group)")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},'image.install("//path/fs:data", "dir/bar")')," installs file or directory\n",Object(l.b)("inlineCode",{parentName:"p"},"data")," to ",Object(l.b)("inlineCode",{parentName:"p"},"dir/bar")," in the image. ",Object(l.b)("inlineCode",{parentName:"p"},"dir/bar")," must not exist, otherwise\nthe operation fails."),Object(l.b)("p",null,"The arguments ",Object(l.b)("inlineCode",{parentName:"p"},"source")," and ",Object(l.b)("inlineCode",{parentName:"p"},"dest")," are mandatory; ",Object(l.b)("inlineCode",{parentName:"p"},"mode"),", ",Object(l.b)("inlineCode",{parentName:"p"},"user"),", and ",Object(l.b)("inlineCode",{parentName:"p"},"group")," are\noptional."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"source")," is either a regular file or a directory. If it is a directory, it must\ncontain only regular files and directories (recursively)."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"mode")," can be used only if ",Object(l.b)("inlineCode",{parentName:"p"},"source")," is a regular file."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"If set, it changes file mode bits of ",Object(l.b)("inlineCode",{parentName:"li"},"dest")," (after installation of ",Object(l.b)("inlineCode",{parentName:"li"},"source"),"\nto ",Object(l.b)("inlineCode",{parentName:"li"},"dest"),"). ",Object(l.b)("inlineCode",{parentName:"li"},"mode")," can be an integer fully specifying the bits or a symbolic\nstring like ",Object(l.b)("inlineCode",{parentName:"li"},"u+rx"),". In the latter case, the changes are applied on top of\nmode 0."),Object(l.b)("li",{parentName:"ul"},"If not set, the mode of ",Object(l.b)("inlineCode",{parentName:"li"},"source")," is ignored, and instead the mode of ",Object(l.b)("inlineCode",{parentName:"li"},"dest"),"\n(and all files and directories inside the ",Object(l.b)("inlineCode",{parentName:"li"},"dest"),' if it is a directory) is set\naccording to the following rule: "u+rwx,og+rx" for directories, "a+rx" for files\nexecutable by the Buck repo user, "a+r" for other files.')),Object(l.b)("p",null,"The arguments ",Object(l.b)("inlineCode",{parentName:"p"},"user")," and ",Object(l.b)("inlineCode",{parentName:"p"},"group")," change file owner and group of all\ndirectories in ",Object(l.b)("inlineCode",{parentName:"p"},"dest"),". ",Object(l.b)("inlineCode",{parentName:"p"},"user")," and ",Object(l.b)("inlineCode",{parentName:"p"},"group")," can be integers or symbolic strings.\nIn the latter case, the passwd/group database from the host (not from the\nimage) is used. The default for ",Object(l.b)("inlineCode",{parentName:"p"},"user")," and ",Object(l.b)("inlineCode",{parentName:"p"},"group")," is ",Object(l.b)("inlineCode",{parentName:"p"},"root"),"."),Object(l.b)("h2",{id:"install_buck_runnable"},Object(l.b)("inlineCode",{parentName:"h2"},"install_buck_runnable")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"install_buck_runnable(source, dest, mode, user, group)")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},'image.install_buck_runnable("//path/fs:exe", "dir/foo")')," copies\nbuck-runnable artifact ",Object(l.b)("inlineCode",{parentName:"p"},"exe")," to ",Object(l.b)("inlineCode",{parentName:"p"},"dir/foo")," in the image. Unlike ",Object(l.b)("inlineCode",{parentName:"p"},"install"),",\nthis supports only single files -- though you can extract a file from a\nbuck-runnable directory via ",Object(l.b)("inlineCode",{parentName:"p"},"image.source"),", see below."),Object(l.b)("p",null,"See ",Object(l.b)("strong",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"strong"},"install"))," for documentation on arguments ",Object(l.b)("inlineCode",{parentName:"p"},"mode"),", ",Object(l.b)("inlineCode",{parentName:"p"},"user"),", and ",Object(l.b)("inlineCode",{parentName:"p"},"group"),"."),Object(l.b)("h3",{id:"when-to-use-install_buck_runnable-vs-install"},"When to use ",Object(l.b)("inlineCode",{parentName:"h3"},"install_buck_runnable")," vs ",Object(l.b)("inlineCode",{parentName:"h3"},"install"),"?"),Object(l.b)("p",null,"If the file being copied is a buck-runnable (e.g. ",Object(l.b)("inlineCode",{parentName:"p"},"cpp_binary"),",\n",Object(l.b)("inlineCode",{parentName:"p"},"python_binary"),"), use ",Object(l.b)("inlineCode",{parentName:"p"},"install_buck_runnable"),". Ditto for copying executable\nfiles from inside directories output by buck-runnable rules. For everything\nelse, use ",Object(l.b)("inlineCode",{parentName:"p"},"install")," ","[1]","."),Object(l.b)("p",null,"Important: failing to use ",Object(l.b)("inlineCode",{parentName:"p"},"install_buck_runnable")," will cause the installed\nbinary to be unusable in image tests in @mode/dev."),Object(l.b)("h2",{id:"tarball"},Object(l.b)("inlineCode",{parentName:"h2"},"tarball")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"tarball(source, dest, force_root_ownership)")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},'image.tarball("files/xyz.tar", "/a/b")')," extracts tarball located at ",Object(l.b)("inlineCode",{parentName:"p"},"files/xyz.tar")," to ",Object(l.b)("inlineCode",{parentName:"p"},"/a/b")," in the image --"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"source")," is one of:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"an ",Object(l.b)("inlineCode",{parentName:"li"},"image.source")," (docs in ",Object(l.b)("inlineCode",{parentName:"li"},"image_source.bzl"),"), or"),Object(l.b)("li",{parentName:"ul"},"the path of a target outputting a tarball target path,\ne.g. an ",Object(l.b)("inlineCode",{parentName:"li"},"export_file")," or a ",Object(l.b)("inlineCode",{parentName:"li"},"genrule")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"dest")," is the destination of the unpacked tarball in the image.\nThis is an image-absolute path to a directory that must be created\nby another ",Object(l.b)("inlineCode",{parentName:"li"},"image_feature")," item.\n")),Object(l.b)("h2",{id:"remove"},Object(l.b)("inlineCode",{parentName:"h2"},"remove")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"remove(dest, must_exist)")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},'image.remove("/a/b")')," recursively removes the file or directory ",Object(l.b)("inlineCode",{parentName:"p"},"/a/b")," --"),Object(l.b)("p",null,"These are allowed to remove paths inherited from the parent layer, or those\ninstalled by RPMs even in this layer. However, removing other items\nexplicitly added by the current layer is not allowed since that seems like a\ndesign smell -- you should probably refactor the constituent image features\nnot to conflict with each other."),Object(l.b)("p",null,"By default, it is an error if the specified path is missing from the image,\nthough this can be avoided by setting ",Object(l.b)("inlineCode",{parentName:"p"},"must_exist")," to ",Object(l.b)("inlineCode",{parentName:"p"},"False"),"."),Object(l.b)("h2",{id:"rpms_install"},Object(l.b)("inlineCode",{parentName:"h2"},"rpms_install")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"rpms_install(rpmlist)")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},'image.rpms_install(["foo"])')," installs ",Object(l.b)("inlineCode",{parentName:"p"},"foo.rpm"),",\n",Object(l.b)("inlineCode",{parentName:"p"},'image.rpms_install(["//target:bar"])')," builds ",Object(l.b)("inlineCode",{parentName:"p"},"bar")," target and installs\nresulting RPM."),Object(l.b)("p",null,"The argument to both functions is a list of RPM package names to install,\nwithout version or release numbers. Dependencies are installed as needed.\nOrder is not significant."),Object(l.b)("p",null,"As shown in the above example, RPMs may also be installed that are the\noutputs of another buck rule by providing a target path or an ",Object(l.b)("inlineCode",{parentName:"p"},"image.source"),"\n(docs in",Object(l.b)("inlineCode",{parentName:"p"},"image_source.bzl"),"), or by directly providing a target path."),Object(l.b)("p",null,"If RPMs are specified by name, as in the first example above, the default\nbehavior is to install the latest available version of the RPMs. Particular\nversions of RPMs can be pinned by specifying ",Object(l.b)("inlineCode",{parentName:"p"},"image.opts")," with\n",Object(l.b)("inlineCode",{parentName:"p"},"rpm_version_set_overrides")," argument. This argument must be the list of\nstructures defined by ",Object(l.b)("inlineCode",{parentName:"p"},"image.rpm.nevra()"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),'image.layer(\n    name = "my_layer",\n    features = [\n        image.rpms_install([\n            "foo",\n        ]),\n    ],\n    build_opts = image.opts(\n        rpm_version_set_overrides = [\n            image.rpm.nevra(\n                name = "foo",\n                epoch = "0",\n                version = "1",\n                release = "el7",\n                arch = "x86_64"\n            ),\n        ],\n    ),\n)\n')),Object(l.b)("p",null,"In this example ",Object(l.b)("inlineCode",{parentName:"p"},"foo-1-el7.x86_64")," will be installed into the layer ",Object(l.b)("inlineCode",{parentName:"p"},"my_layer"),"\neven if a newer version is available."),Object(l.b)("p",null,"If the argument ",Object(l.b)("inlineCode",{parentName:"p"},"rpmlist")," lists both RPM name and buck rule targets, RPMs\nspecified by buck rule targets are installed before RPMs specified by names.\nHence, if an RPM defined by name requires a newer version of an RPM defined by\nbuck rule target, the RPM will be upgraded and the whole operation may succeed.\nThus, the explicit specification of RPM version by buck rule does not guarantee\nthat this particular version is present in resulting image."),Object(l.b)("p",null,"Another important caveat about RPMs specified by buck rule targets is that\ndowngrade is allowable: if the parent layer has RPM ",Object(l.b)("inlineCode",{parentName:"p"},"foobar-v2")," installed, and\nthen ",Object(l.b)("inlineCode",{parentName:"p"},"foobar-v1")," is specified by a buck rule, the result of RPM installation\nwill be ",Object(l.b)("inlineCode",{parentName:"p"},"foobar-v2")," downgraded to ",Object(l.b)("inlineCode",{parentName:"p"},"foobar-v1"),"."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"image.rpms_install()")," provides only limited support for RPM post-install\nscripts. Those scripts are executed in a virtual environment without runtime\nmounts like ",Object(l.b)("inlineCode",{parentName:"p"},"/proc"),". As an example, the script may invoke a binary requiring\n",Object(l.b)("inlineCode",{parentName:"p"},"/proc/self/exe")," or a shared library from a directory not available in the\nimage. Then the binary fails, and the final result of the operation would differ\nfrom the RPM installation on the host where the binary succeeds. The issue may\nbe aggravated by the lack of error handling in the script making the RPM install\noperation successful even if the binary fails."),Object(l.b)("h2",{id:"rpms_remove_if_exists"},Object(l.b)("inlineCode",{parentName:"h2"},"rpms_remove_if_exists")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"rpms_remove_if_exists(rpmlist)")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},'image.rpms_remove_if_exists(["baz"])')," removes ",Object(l.b)("inlineCode",{parentName:"p"},"baz.rpm")," if exists."),Object(l.b)("p",null,"Note that removals may only be applied against the parent layer -- if your\ncurrent layer includes features both removing and installing the same\npackage, this will cause a build failure."),Object(l.b)("h2",{id:"symlink_dir"},Object(l.b)("inlineCode",{parentName:"h2"},"symlink_dir")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"symlink_dir(link_target, link_name)")),Object(l.b)("p",null,"The operation follows rsync convention for a destination (",Object(l.b)("inlineCode",{parentName:"p"},"link_name"),"):\n",Object(l.b)("inlineCode",{parentName:"p"},"ends/in/slash/"),' means "write into this directory", ',Object(l.b)("inlineCode",{parentName:"p"},"does/not/end/with/slash"),'\nmeans "write with the specified filename":'),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'image.symlink_dir("/d", "/e/")')," symlinks directory ",Object(l.b)("inlineCode",{parentName:"li"},"/d")," to ",Object(l.b)("inlineCode",{parentName:"li"},"/e/d")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'image.symlink_dir("/a", "/b/c")')," symlinks directory ",Object(l.b)("inlineCode",{parentName:"li"},"/a")," to ",Object(l.b)("inlineCode",{parentName:"li"},"/b/c"))),Object(l.b)("p",null,"Both arguments are mandatory:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"link_target")," is the image-absolute source file/dir of the symlink.\nThis file must exist as we do not support dangling symlinks."),Object(l.b)("p",{parentName:"li"},"  IMPORTANT: The emitted symlink will be ",Object(l.b)("strong",{parentName:"p"},"relative")," by default, enabling\neasier inspection if images via ",Object(l.b)("inlineCode",{parentName:"p"},"buck-image-out"),". If this is a problem\nfor you, we can add an ",Object(l.b)("inlineCode",{parentName:"p"},"absolute")," boolean kwarg.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"link_name")," is an image-absolute path. A trailing / is significant."),Object(l.b)("p",{parentName:"li"},"  A ",Object(l.b)("inlineCode",{parentName:"p"},"link_name")," that does NOT end in / is a full path in the new image,\nending with a filename for the new symlink."),Object(l.b)("p",{parentName:"li"},"  As with ",Object(l.b)("inlineCode",{parentName:"p"},"image.clone"),", a traling / means that ",Object(l.b)("inlineCode",{parentName:"p"},"link_name")," must be a\npre-existing directory in the image (e.g. created via ",Object(l.b)("inlineCode",{parentName:"p"},"image.mkdir"),"), and\nthe actual link will be placed at ",Object(l.b)("inlineCode",{parentName:"p"},"link_name/(basename of link_target)"),".\n"))),Object(l.b)("h2",{id:"symlink_file"},Object(l.b)("inlineCode",{parentName:"h2"},"symlink_file")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"symlink_file(link_target, link_name)")),Object(l.b)("p",null,"The operation follows rsync convention for a destination (",Object(l.b)("inlineCode",{parentName:"p"},"link_name"),"):\n",Object(l.b)("inlineCode",{parentName:"p"},"ends/in/slash/"),' means "write into this directory", ',Object(l.b)("inlineCode",{parentName:"p"},"does/not/end/with/slash"),'\nmeans "write with the specified filename":'),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'image.symlink_file("/d", "/e/")')," symlinks file ",Object(l.b)("inlineCode",{parentName:"li"},"/d")," to ",Object(l.b)("inlineCode",{parentName:"li"},"/e/d")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'image.symlink_file("/a", "/b/c")')," symlinks file ",Object(l.b)("inlineCode",{parentName:"li"},"/a")," to ",Object(l.b)("inlineCode",{parentName:"li"},"/b/c"))),Object(l.b)("p",null,"Both arguments are mandatory:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"link_target")," is the image-absolute source file/dir of the symlink.\nThis file must exist as we do not support dangling symlinks."),Object(l.b)("p",{parentName:"li"},"  IMPORTANT: The emitted symlink will be ",Object(l.b)("strong",{parentName:"p"},"relative")," by default, enabling\neasier inspection if images via ",Object(l.b)("inlineCode",{parentName:"p"},"buck-image-out"),". If this is a problem\nfor you, we can add an ",Object(l.b)("inlineCode",{parentName:"p"},"absolute")," boolean kwarg.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"link_name")," is an image-absolute path. A trailing / is significant."),Object(l.b)("p",{parentName:"li"},"  A ",Object(l.b)("inlineCode",{parentName:"p"},"link_name")," that does NOT end in / is a full path in the new image,\nending with a filename for the new symlink."),Object(l.b)("p",{parentName:"li"},"  As with ",Object(l.b)("inlineCode",{parentName:"p"},"image.clone"),", a traling / means that ",Object(l.b)("inlineCode",{parentName:"p"},"link_name")," must be a\npre-existing directory in the image (e.g. created via ",Object(l.b)("inlineCode",{parentName:"p"},"image.mkdir"),"), and\nthe actual link will be placed at ",Object(l.b)("inlineCode",{parentName:"p"},"link_name/(basename of link_target)"),".\n"))),Object(l.b)("h2",{id:"host_dir_mount"},Object(l.b)("inlineCode",{parentName:"h2"},"host_dir_mount")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"host_dir_mount(source, mountpoint)")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},'image.host_dir_mount("/path/foo")')," bind-mounts the host directory\n",Object(l.b)("inlineCode",{parentName:"p"},"/path/foo")," into the container at ",Object(l.b)("inlineCode",{parentName:"p"},"/path/foo"),". Another image item must\nprovide the parent ",Object(l.b)("inlineCode",{parentName:"p"},"/path"),", but this item will create the mount-point."),Object(l.b)("h2",{id:"host_file_mount"},Object(l.b)("inlineCode",{parentName:"h2"},"host_file_mount")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"host_file_mount(source, mountpoint)")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},'image.host_file_mount("/path/bar", "/baz")')," bind-mounts the file ",Object(l.b)("inlineCode",{parentName:"p"},"/path/bar"),"\ninto the container at ",Object(l.b)("inlineCode",{parentName:"p"},"/baz"),"."),Object(l.b)("h2",{id:"layer_mount"},Object(l.b)("inlineCode",{parentName:"h2"},"layer_mount")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"layer_mount(source, mountpoint)")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},'image.layer_mount(":other-image-layer")'),' makes the specified layer available\ninside the container available at the "default_mountpoint" provided by the\nlayer in its config. That fails if the layer lacks a default mountpoint, but\nthen you can pass an explicit ',Object(l.b)("inlineCode",{parentName:"p"},"mountpoint")," argument."),Object(l.b)("h2",{id:"layer"},Object(l.b)("inlineCode",{parentName:"h2"},"layer")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"layer(name, parent_layer, features, build_opts, antlir_rule, **image_layer_kwargs)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"layer_alias"},Object(l.b)("inlineCode",{parentName:"h2"},"layer_alias")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"layer_alias(name, layer, visibility)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"package"},Object(l.b)("inlineCode",{parentName:"h2"},"package")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"package(name, layer, visibility, writable_subvolume, seed_device, antlir_rule, build_appliance, format)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"packaged_layer"},Object(l.b)("inlineCode",{parentName:"h2"},"packaged_layer")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"packaged_layer(layer_name, publisher_name)")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"image.packaged_layer")," is a small wrapper around ",Object(l.b)("inlineCode",{parentName:"p"},"image.layer")," to support both\ncreating a layer and including a reference to a corresponding 'publisher' target\nwithin that layer, which is then responsible for publishing that layer as a\nsquashfs package to an external artifact store."),Object(l.b)("p",null,"Args:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"layer_name: Target name that will be given to `partial_layer`.\n\npublisher_name: Target name that will be given to `partial_publisher`.\n\npartial_layer: A partial `image.layer` object that will be supplied with a\n    custom `mount_config` and located under `name`.\n\npartial_publisher: A partial target supporting a `path_actions` argument,\n    which will be provided by the implementation. When run, this target\n    should publish the targets in `path_actions` to an artifact store.\n")),Object(l.b)("h2",{id:"python_unittest"},Object(l.b)("inlineCode",{parentName:"h2"},"python_unittest")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"python_unittest(name, layer, boot, run_as_user, visibility, par_style, hostname, container_opts, **python_unittest_kwargs)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"sendstream_layer"},Object(l.b)("inlineCode",{parentName:"h2"},"sendstream_layer")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"sendstream_layer(name, source, build_opts, antlir_rule, **image_layer_kwargs)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"source"},Object(l.b)("inlineCode",{parentName:"h2"},"source")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"source(source, **kwargs)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"test_rpm_names"},Object(l.b)("inlineCode",{parentName:"h2"},"test_rpm_names")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"test_rpm_names(name, layer, rpm_list)")),Object(l.b)("p",null,"No docstring available."))}p.isMDXComponent=!0},182:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),s=p(n),m=a,u=s["".concat(r,".").concat(m)]||s[m]||d[m]||l;return n?i.a.createElement(u,o(o({ref:t},c),{},{components:n})):i.a.createElement(u,o({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=m;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var c=2;c<l;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);